

import org.apache.spark.sql.SparkSession
import org.apache.spark.ml._
import org.apache.spark.ml.feature._
import org.apache.spark.ml.classification.LogisticRegression
import org.apache.spark.sql.functions._
import org.apache.spark.sql.SaveMode
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.types.IntegerType
import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.ml.feature.{VectorAssembler,StringIndexer,VectorIndexer,OneHotEncoder}
import org.apache.spark.ml.linalg.Vectors
import org.apache.spark.ml.Pipeline


val df = spark.read.option("header", "true").option("inferSchema", "true").csv("hdfs://10.128.0.2:8020/user/BigData/CovidCases.csv")

df.printSchema()

df.select("Outcome").distinct().show()

val df1 = df.na.drop()

val df2 = df1.filter("Outcome != 'ACTIVE'")

val ResolvedDf = df2.filter("Outcome='RESOLVED'")

val FatalDf = df2.filter("Outcome='FATAL'")

val sampleRatio = FatalDf.count().toDouble / df2.count().toDouble
val ResolvedSampleDf = ResolvedDf.sample(false, sampleRatio)

val Data = FatalDf.unionAll(ResolvedSampleDf)
  

// Machine Learning


val regData = Data.select(col("Outcome"),col("Age Group"),col("Source of Infection"),col("Client Gender"))

val regDataindexer = new StringIndexer()
  .setInputCol("Outcome")
  .setOutputCol("label")
  
val regDataindexed = regDataindexer.fit(regData).transform(regData)
//regDataindexed.show()

val dataReg = regDataindexed.drop("Outcome")

// converting feature variable from strings into numerical values

val AgeIndexer = new StringIndexer().setInputCol("Age Group").setOutputCol("AgeIndex")
val SourceIndexer = new StringIndexer().setInputCol("Source of Infection").setOutputCol("SourceIndex")
val GenderIndexer = new StringIndexer().setInputCol("Client Gender").setOutputCol("GenderIndex")

// Convert Numerical Values into One hot encoding

val AgeEncoder = new OneHotEncoder().setInputCol("AgeIndex").setOutputCol("AgeVec")
val SourceEncoder = new OneHotEncoder().setInputCol("SourceIndex").setOutputCol("SourceVec")
val GenderEncoder = new OneHotEncoder().setInputCol("GenderIndex").setOutputCol("GenderVec")

// (labels,features)

val assembler = new VectorAssembler().setInputCols(Array("AgeVec","SourceVec","GenderVec")).setOutputCol("features")

// Spliting the data

val Array(training,test) = finalData.randomSplit(Array(0.7,0.3),seed=1234)


val lr = new LogisticRegression()

val pipeline = new Pipeline().setStages(Array(AgeIndexer,SourceIndexer,GenderIndexer,AgeEncoder,SourceEncoder,GenderEncoder,assembler,lr))

val model = pipeline.fit(training)

val results = model.transform(test)

// Model Evaluation

val PredictionAndLabel = results.select($"prediction",$"label").as[(Double,Double)].rdd

val metrics = new MulticlassMetrics(PredictionAndLabel)

println("Confusion Matrix:")
println(metrics.confusionMatrix)

println("\nAccuracy of Model:")
println(metrics.accuracy*100)
println("\n")




